function [y1] = Val12(x1)
%VAL12 neural network simulation function.
%
% Auto-generated by MATLAB, 24-Feb-2020 17:38:53.
% 
% [y1] = Val12(x1) takes these arguments:
%   x = 6xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-3;-3;-1;-1;-1;-1];
x1_step1.gain = [0.333333333333333;0.333333333333333;1;1;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.28647094325059468956;-0.68569835782434152005;0.093415594279851535409;-0.4840365432708197968;-1.0476754435968302914;0.8618464755320459636;0.74807072053350254226;-0.55925929753722725124;-0.23633486600259201449;0.82835462140511972873;-0.51300309091831852726;0.73105879703040499429];
IW1_1 = [0.49690540810007544081 -0.16541470100006677724 -0.0055927271171235986083 -0.024452913825561910233 -0.0075441312438592408873 -0.091296077913162340667;-7.602916525229250766 -0.7208355824536585299 -0.94749491785801642774 -0.1211271547138823429 -1.1263344072383254524 -0.16259644028786862657;-8.7209465941165635883 0.190764041810938062 -0.78407059145444657489 -0.048841028247556553255 -0.72805107751852282671 0.10680803026223523178;0.95246606732181371413 -0.49023434992172465474 -0.45647778946481526452 -0.20691747226598308784 -0.57121853132862954183 -0.22724471053393544007;0.90016430400010516433 0.68650275588927545112 0.13706780186917952302 0.088061774694821473575 0.14373135498675559951 0.1169989706312422606;-2.7245974330530597918 0.86626603960796133563 -0.50032155410582268562 0.012896150786727858528 -0.40567489265735040549 0.1538167354943895393;11.356857655504386528 -0.26480229611265126977 -0.13659051871233640618 -0.054518734757579290218 0.06089470306870479327 -0.13626076869129152835;-9.6555086311138076383 0.2147782137261089741 -0.16872815243501534943 0.012005072516426386342 -0.24655710860482496494 0.11466723001307657648;-8.3054927737267565391 0.19617034127365395868 -0.51178219972133398574 -0.025860341968488055608 -0.47965446329815769611 0.11140227518284571973;-0.49462839003369585278 0.42574288107722524366 -0.069664888932459950732 0.093870455227231364148 -0.07546837762975061592 0.091827711012892304643;-0.84193817899246181646 -0.0426359498282625482 -0.36095947006609008234 -0.11421144256179867338 -0.37043539673747855057 0.016052119218547034746;-3.6697974973673268551 -1.1734175524760503961 -0.47480811449659027224 -0.084555523446621261296 -0.69787221099202290109 -0.030694764416600080204];

% Layer 2
b2 = 1.0844777402170560077;
LW2_1 = [-2.0097065039565853439 0.17085749770478969589 -2.1916696847167900231 0.15283181497321332576 0.67992292703726209258 -0.26077539434792734729 -2.8510225440084613346 -6.2469134813455591271 5.5448236339916636695 -1.7155873417791278612 0.49583195953729419792 -0.17772417548093349948];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.106967270368547;
y1_step1.xoffset = 5.079642;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
